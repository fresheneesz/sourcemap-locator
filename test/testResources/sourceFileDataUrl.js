var someJavascript = {

}

//@ sourceMappingURL=data:application/json;base64,{"version":3,"file":"generated.js","sources":["F:\\billysFile\\code\\javascript\\nodejs\\deadunitCore\\node_modules\\build-modules\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/async-future/asyncFuture.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/async-future/node_modules/trimArguments/trimArguments.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/build-modules/node_modules/browserify/node_modules/inherits/inherits_browser.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/build-modules/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/build-modules/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","F:/billysFile/code/javascript/nodejs/deadunitCore/node_modules/build-modules/node_modules/browserify/node_modules/util/util.js","F:/billysFile/code/javascript/nodejs/deadunitCore/test/deadunitTests.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5kBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Copyright (c) 2013 Billy Tetrud - Free to use for any purpose: MIT License*/\r\n\r\nvar trimArgs = require(\"trimArguments\")\r\n\r\n\r\nmodule.exports = Future\r\n\r\nFuture.debug = false // switch this to true if you want ids and long stack traces\r\n\r\nvar curId = 0         // for ids\\\r\nfunction Future(value) {\r\n\tif(arguments.length > 0) {\r\n\t\tvar f = new Future()\r\n        f.return(value)\r\n        return f\r\n\t} else {\r\n        this.isResolved = false\r\n        this.queue = []\r\n        if(Future.debug) {\r\n            curId++\r\n            this.id = curId\r\n        }\r\n    }\r\n}\r\n\r\n// static methods\r\n\r\n// has one parameter: either a bunch of futures, or a single array of futures\r\n// returns a promise that resolves when one of them errors, or when all of them succeeds\r\nFuture.all = function() {\r\n    if(arguments[0] instanceof Array) {\r\n        var futures = arguments[0]\r\n    } else {\r\n        var futures = trimArgs(arguments)\r\n    }\r\n\r\n    var f = new Future()\r\n    var results = []\r\n\r\n    if(futures.length > 0) {\r\n        var current = futures[0]\r\n        futures.forEach(function(future, index) {\r\n            current = current.then(function(v) {\r\n                results[index] = v\r\n                return futures[index+1]\r\n            })\r\n        })\r\n\r\n        //if\r\n        current.catch(function(e) {\r\n            f.throw(e)\r\n        })\r\n        // else\r\n        current.then(function() {\r\n            f.return(results)\r\n        })\r\n\r\n\r\n    } else {\r\n        f.return(results)\r\n    }\r\n\r\n    return f\r\n}\r\n\r\n// either used like futureWrap(function(){ ... })(arg1,arg2,etc) or\r\n//  futureWrap(object, 'methodName')(arg1,arg2,etc)\r\nFuture.wrap = function() {\r\n    // function\r\n    if(arguments.length === 1) {\r\n        var fn = arguments[0]\r\n        var object = undefined\r\n\r\n\r\n    // object, function\r\n    } else {\r\n        var object = arguments[0]\r\n        var fn = object[arguments[1]]\r\n    }\r\n\r\n    return function() {\r\n        var args = Array.prototype.slice.call(arguments)\r\n        var future = new Future\r\n        args.push(future.resolver())\r\n        var me = this\r\n        if(object) me = object\r\n        fn.apply(me, args)\r\n        return future\r\n    }\r\n}\r\n\r\n\r\n// default\r\nvar unhandledErrorHandler = function(e) {\r\n    setTimeout(function() {\r\n        throw e\r\n    },0)\r\n}\r\n\r\n// setup unhandled error handler\r\n// unhandled errors happen when done is called, and  then an exception is thrown from the future\r\nFuture.error = function(handler) {\r\n    unhandledErrorHandler = handler\r\n}\r\n\r\n// instance methods\r\n\r\n// returns a value for the future (can only be executed once)\r\n// if there are callbacks waiting on this value, they are run in the next tick\r\n    // (ie they aren't run immediately, allowing the current thread of execution to complete)\r\nFuture.prototype.return = function(v) {\r\n    resolve(this, 'return', v)\r\n}\r\nFuture.prototype.throw = function(e) {\r\n    resolve(this, 'error', e)\r\n}\r\n\r\nfunction setNext(that, future) {\r\n    if(future !== undefined && !isLikeAFuture(future) )\r\n        throw Error(\"Value returned from then or catch *not* a Future: \"+future)\r\n\r\n    resolve(that, 'next', future)\r\n}\r\n\r\nfunction wait(that, cb) {\r\n    if(that.isResolved) {\r\n        executeCallbacks(that, [cb])\r\n    } else {\r\n        that.queue.push(cb)\r\n    }\r\n}\r\n\r\n// duck typing to determine if something is or isn't a future\r\nfunction isLikeAFuture(x) {\r\n    return x.isResolved !== undefined && x.queue !== undefined && x.then !== undefined\r\n}\r\n\r\nfunction waitOnResult(f, result, cb) {\r\n    wait(result, function() {\r\n        if(this.hasError) {\r\n            f.throw(this.error)\r\n        } else if(this.hasNext) {\r\n            waitOnResult(f, this.next, cb)\r\n        } else {\r\n            try {\r\n                setNext(f, cb(this.result))\r\n            } catch(e) {\r\n                f.throw(e)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// cb takes one parameter - the value returned\r\n// cb can return a Future, in which case the result of that Future is passed to next-in-chain\r\nFuture.prototype.then = function(cb) {\r\n    var f = new Future\r\n    wait(this, function() {\r\n        if(this.hasError)\r\n            f.throw(this.error)\r\n        else if(this.hasNext)\r\n            waitOnResult(f, this.next, cb)\r\n        else {\r\n            try {\r\n                setNext(f, cb(this.result))\r\n            } catch(e) {\r\n                f.throw(e)\r\n            }\r\n        }\r\n    })\r\n    return f\r\n}\r\n// cb takes one parameter - the error caught\r\n// cb can return a Future, in which case the result of that Future is passed to next-in-chain\r\nFuture.prototype.catch = function(cb) {\r\n    var f = new Future\r\n    wait(this, function() {\r\n        if(this.hasError) {\r\n            try {\r\n                setNext(f, cb(this.error))\r\n            } catch(e) {\r\n                f.throw(e)\r\n            }\r\n        } else if(this.hasNext) {\r\n            this.next.then(function(v) {\r\n                f.return(v)\r\n            }).catch(function(e) {\r\n                setNext(f, cb(e))\r\n            })\r\n        } else {\r\n            f.return(this.result)\r\n        }\r\n    })\r\n    return f\r\n}\r\n// cb takes no parameters\r\n// callback's return value is ignored, but thrown exceptions propogate normally\r\nFuture.prototype.finally = function(cb) {\r\n    var f = new Future\r\n    wait(this, function() {\r\n        try {\r\n            if(this.hasNext) {\r\n                this.next.then(function(v) {\r\n                    var x = cb()\r\n                    f.return(v)\r\n                    return x\r\n                }).catch(function(e) {\r\n                    var x = cb()\r\n                    f.throw(e)\r\n                    return x\r\n                }).done()\r\n            } else if(this.hasError) {\r\n                Future(true).then(function() {\r\n                    return cb()\r\n                }).then(function() {\r\n                    f.throw(this.error)\r\n                }).catch(function(e) {\r\n                    f.throw(e)\r\n                }).done()\r\n\r\n            } else  {\r\n                Future(true).then(function() {\r\n                    return cb()\r\n                }).then(function() {\r\n                    f.return(this.result)\r\n                }).catch(function(e) {\r\n                    f.throw(e)\r\n                }).done()\r\n            }\r\n        } catch(e) {\r\n            f.throw(e)\r\n        }\r\n    })\r\n    return f\r\n}\r\n\r\n// all unused futures should end with this (e.g. most then-chains)\r\n// detatches the future so any propogated exception is thrown (so the exception isn't silently lost)\r\nFuture.prototype.done = function() {\r\n    wait(this, function() {\r\n        if(this.hasError) {\r\n            unhandledErrorHandler(this.error)\r\n        } else if(this.hasNext) {\r\n            this.next.catch(function(e) {\r\n                unhandledErrorHandler(e)\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\nFuture.prototype.resolver = function() {\r\n    var me = this\r\n\r\n    return function(e,v) {\r\n        if(e) { // error argument\r\n            me.throw(e)\r\n        } else {\r\n            me.return(v)\r\n        }\r\n    }\r\n}\r\n\r\nFuture.prototype.resolved = function() {\r\n    return this.isResolved\r\n}\r\n\r\n\r\nfunction resolve(that, type, value) {\r\n    if(that.isResolved)\r\n        throw Error(\"Future resolved more than once! Resolution: \"+value)\r\n\r\n    that.isResolved = true\r\n    that.hasError = type === 'error'\r\n    that.hasNext = type === 'next' && value !== undefined\r\n\r\n    if(that.hasError)\r\n        that.error = value\r\n    else if(that.hasNext)\r\n        that.next = value\r\n    else\r\n        that.result = value\r\n\r\n    executeCallbacks(that, that.queue)\r\n}\r\n\r\nfunction executeCallbacks(that, callbacks) {\r\n    if(callbacks.length > 0) {\r\n        setTimeout(function() {\r\n            callbacks.forEach(function(cb) {\r\n                cb.apply(that)\r\n            })\r\n        },0)\r\n    }\r\n}\r\n","// resolves varargs variable into more usable form\n// args - should be a function arguments variable\n// returns a javascript Array object of arguments that doesn't count trailing undefined values in the length\nmodule.exports = function(theArguments) {\n    var args = Array.prototype.slice.call(theArguments, 0)\n\n    var count = 0;\n    for(var n=args.length-1; n>=0; n--) {\n        if(args[n] === undefined)\n            count++\n    }\n    args.splice(-0, count)\n    return args\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","(function (process,global){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n}).call(this,require(\"F:\\\\billysFile\\\\code\\\\javascript\\\\nodejs\\\\deadunitCore\\\\node_modules\\\\build-modules\\\\node_modules\\\\browserify\\\\node_modules\\\\insert-module-globals\\\\node_modules\\\\process\\\\browser.js\"),typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})","(function (global){\n\"use strict\";\r\n\r\nvar Future = require('async-future')\r\n\r\nexports.name = \"Unit test the unit test-results (these should all succeed)\"\r\n\r\nexports.getTests = function(Unit, testEnvironment, isDone) {\r\n    var moreFutures = []\r\n\r\n    if(testEnvironment === 'web') {\r\n        var testFileName = \"deadunitTests.browser.umd.js\"\r\n\r\n    } else if(testEnvironment === 'node') {\r\n        var testFileName = \"deadunitTests.js\"\r\n\r\n    } else throw \"invalid environment: \"+testEnvironment\r\n\r\n    return function(t) {\r\n\r\n        var errorCount = 0\r\n        this.error(function(e) {\r\n            if(errorCount === 0) {\r\n                e.message.indexOf(\"Async\" !== -1)\r\n            } else {\r\n                t.ok(false, e)\r\n            }\r\n\r\n            errorCount++\r\n        })\r\n\r\n        //*\r\n        this.test('simple success', function(t) {\r\n            this.count(3)\r\n            var test = Unit.test(function() {\r\n                this.ok(true)\r\n            }).events({\r\n                end: function() {\r\n                    var results = test.results()\r\n\r\n                    t.ok(results.name === undefined, results.name)\r\n                    t.ok(results.results.length === 1)\r\n                    t.ok(results.results[0].success === true)\r\n                }\r\n            })\r\n        })\r\n\r\n        this.test('simple failure', function(t) {\r\n            this.count(3)\r\n            var test = Unit.test(function() {\r\n                this.ok(false)\r\n            }).events({\r\n                end: function() {\r\n                    var results = test.results()\r\n\r\n                    t.ok(results.name === undefined)\r\n                    t.ok(results.results.length === 1)\r\n                    t.ok(results.results[0].success === false)\r\n                }\r\n            })\r\n        })\r\n\r\n        var simpleExceptionDone = new Future\r\n        this.test('simple exception', function(t) {\r\n            this.count(4)\r\n            var test = Unit.test(function() {\r\n                this.count(1)\r\n                this.timeout(0) // just to make the test end faster\r\n                throw Error(\"sync\")\r\n            }).events({\r\n                end: function() {\r\n                    var results = test.results()\r\n\r\n                    t.ok(results.name === undefined)\r\n                    t.ok(results.exceptions.length === 1, results.exceptions.length)\r\n                    t.ok(results.exceptions[0].message === 'sync')\r\n                    t.ok(results.timeout === true, results.timeout)\r\n\r\n                    simpleExceptionDone.return()\r\n                }\r\n            })\r\n        })\r\n\r\n        simpleExceptionDone.then(function() {\r\n            var simpleAsyncExceptionFutureDone = new Future\r\n            t.test('simple async exception', function(t) {\r\n                this.count(4)\r\n\r\n                var simpleAsyncExceptionFuture = new Future\r\n                var simpleAsyncExceptionTest = Unit.test(function(t) {\r\n                    this.count(1)\r\n                    setTimeout(function() {\r\n                        setTimeout(function() {\r\n                            t.ok(true) // to prevent it from timing out\r\n                            simpleAsyncExceptionFuture.return()\r\n                        }, 0)\r\n                        throw Error(\"Async\")\r\n                    }, 0)\r\n                }).events({\r\n                    end: function() {\r\n                        simpleAsyncExceptionFuture.then(function() {\r\n                            var test = simpleAsyncExceptionTest.results()\r\n\r\n                            t.ok(test.name === undefined)\r\n                            t.ok(test.exceptions.length === 1)\r\n                            if(testEnvironment === 'node') {\r\n                                t.ok(test.exceptions[0].message === 'Async')\r\n                            } else {\r\n                                t.ok(\r\n                                    test.exceptions[0].message.indexOf('Uncaught error in') === 0\r\n                                    && test.exceptions[0].message.indexOf('Error: Async') !== -1\r\n                                    && test.exceptions[0].message.indexOf('deadunitTests.browser.umd.js') !== -1\r\n                                )\r\n                            }\r\n                            t.ok(test.timeout === false)\r\n\r\n                            simpleAsyncExceptionFutureDone.return()\r\n                        }).done()\r\n                    }\r\n                })\r\n\r\n                moreFutures.push(simpleAsyncExceptionFutureDone)\r\n            })\r\n\r\n            return simpleAsyncExceptionFutureDone\r\n\r\n        }).then(function() {\r\n\r\n            var fullDeadunitTestFuture = new Future\r\n            t.test('Testing \"Full deadunit test\"', function() {\r\n                this.count(9)\r\n\r\n                var futuresToWaitOn = []\r\n                var testGroups = Unit.test(\"Full deadunit test (results of this will be verified)\", function() {\r\n\r\n                    this.timeout(2000)\r\n\r\n                    this.test(\"Test Some Stuff\", function() {\r\n                        this.test(\"assertSomething\", function() {\r\n                            this.ok(5 === 5)\r\n                        })\r\n                        this.test(\"'shouldFail' fails correctly\", function() {\r\n                            this.ok(5 === 3, 'actual', 'expected')\r\n                            this.equal(true, false)\r\n                            this.log(\"test log\")\r\n                            this.count(2)\r\n                        })\r\n                        this.test(\"shouldThrowException\", function() {\r\n                            this.ok(true)\r\n                            this.count(1)\r\n                            throw new Error(\"Ahhhhh!\")\r\n                        })\r\n                        this.test(\"should throw an asynchronous exception\", function(t) {\r\n                            this.count(1)\r\n\r\n                            var f = new Future\r\n                            futuresToWaitOn.push(f)\r\n                            setTimeout(function() {\r\n                                setTimeout(function() {\r\n                                    t.ok(true) // to prevent timeout *and* an early ending of the test\r\n                                    f.return()\r\n                                }, 0)\r\n                                throw Error(\"Asynchronous Ahhhhh!\")\r\n                            },0)\r\n                        })\r\n\r\n                        this.log(\"subtest without a name\")\r\n                        this.test(function() {\r\n                            this.ok(true)\r\n                        })\r\n\r\n                        this.count(4) // 5 actually happen\r\n                    })\r\n                    this.test(\"SuccessfulTestGroup\", function() {\r\n                        this.test(\"yay\", function() {\r\n                            this.equal(true, true)\r\n                        })\r\n                    })\r\n\r\n                    this.test(\"long before/after\", function() {\r\n                        var x = 0\r\n                        this.before(function() {\r\n                            for(var n=0; n<1000000; n++) {\r\n                                x += x+1\r\n                            }\r\n                        })\r\n\r\n                        this.test(\"one\", function() {\r\n                            this.ok(x === Infinity, x)\r\n                        })\r\n                    })\r\n\r\n                    this.test(\"asynchronous errors\", function() {\r\n                        setTimeout(function() {\r\n                            throw Error(\"moo\")\r\n                        },0)\r\n                        setTimeout(function() {\r\n                            throw \"thrown string\"\r\n                        },0)\r\n                    })\r\n\r\n                    var f = new Future\r\n                    futuresToWaitOn.push(f)\r\n                    setTimeout(function() {    // why is this here? Possibly to make sure the \"asynchronous errors\" finish first?\r\n                        f.return()\r\n                    },50)\r\n                }).events({end: function() {\r\n\r\n                    var futuresForThisTest = Future.all(futuresToWaitOn)\r\n                    moreFutures.push(futuresForThisTest)\r\n                    futuresForThisTest.then(function() {\r\n                        var test = testGroups.results()\r\n\r\n                        this.ok(test.timeout === false, test.timeout)\r\n                        this.ok(test.type === \"group\")\r\n                        this.ok(test.name === \"Full deadunit test (results of this will be verified)\")\r\n                        if(testEnvironment === 'node') {\r\n                            this.ok(test.exceptions.length === 0)\r\n                        } else {\r\n                            this.ok(test.exceptions.length === 3, test.exceptions)\r\n                        }\r\n\r\n\r\n\r\n                        this.ok(test.results.length === 4, test.results.length)\r\n\r\n                        this.test(\"Verify 'Test Some Stuff'\", function() {\r\n                            this.count(46)\r\n\r\n                            var subtest1 = test.results[0]\r\n                            this.ok(subtest1.type === \"group\")\r\n                            this.ok(subtest1.name === \"Test Some Stuff\")\r\n                            this.ok(subtest1.exceptions.length === 0)\r\n                            this.ok(subtest1.results.length === 7, subtest1.results.length)\r\n\r\n                                var subtest2 = subtest1.results[0]\r\n                                this.ok(subtest2.type === \"group\")\r\n                                this.ok(subtest2.name === \"assertSomething\")\r\n                                this.ok(subtest2.exceptions.length === 0)\r\n                                this.ok(subtest2.results.length === 1)\r\n\r\n                                    var subtest3 = subtest2.results[0]\r\n                                    this.ok(subtest3.type === \"assert\")\r\n                                    this.ok(subtest3.success === true)\r\n                                    this.ok(subtest3.sourceLines.indexOf(\"5 === 5\") !== -1)\r\n                                    this.ok(subtest3.file === testFileName)\r\n                                    this.ok(subtest3.line === 128, subtest3.line)\r\n                                    //this.ok(subtest3.column === 9, subtest3.column)\r\n\r\n                                subtest2 = subtest1.results[1]\r\n                                this.ok(subtest2.name === \"'shouldFail' fails correctly\", subtest2.name)\r\n                                this.ok(subtest2.exceptions.length === 0)\r\n                                this.ok(subtest2.results.length === 4, subtest2.results.length)\r\n\r\n\r\n                                    subtest3 = subtest2.results[0]\r\n                                    this.ok(subtest3.type === \"log\")\r\n                                    this.ok(subtest3.values.length === 1)\r\n                                    this.ok(subtest3.values[0] === \"test log\")\r\n\r\n                                    subtest3 = subtest2.results[1]\r\n                                    this.ok(subtest3.success === false)\r\n                                    this.ok(subtest3.sourceLines.indexOf(\"5 === 3\") !== -1)\r\n                                    this.ok(subtest3.actual === 'actual')\r\n                                    this.ok(subtest3.expected === 'expected')\r\n\r\n                                    subtest3 = subtest2.results[2]\r\n                                    this.ok(subtest3.success === false)\r\n                                    this.ok(subtest3.sourceLines.indexOf(\"true, false\") !== -1)\r\n                                    this.ok(subtest3.file === testFileName)\r\n                                    this.ok(subtest3.line === 132, subtest3.line)\r\n                                    //this.ok(subtest3.column === 9, subtest3.column)\r\n\r\n                                    subtest3 = subtest2.results[3]      // count\r\n                                    this.ok(subtest3.type === \"assert\", subtest3.type)\r\n                                    this.ok(subtest3.success === true, subtest3.success)\r\n\r\n                                subtest2 = subtest1.results[2]\r\n                                this.ok(subtest2.name === \"shouldThrowException\")\r\n                                this.ok(subtest2.exceptions.length === 1)\r\n                                this.ok(subtest2.exceptions[0].message === \"Ahhhhh!\")\r\n\r\n                                this.ok(subtest2.results.length === 2, subtest2.results.length)\r\n\r\n                                    subtest3 = subtest2.results[0]\r\n                                    this.ok(subtest3.success === true)\r\n\r\n                                    subtest3 = subtest2.results[1]     // count\r\n                                    this.ok(subtest3.success === true)\r\n\r\n                                subtest2 = subtest1.results[3]\r\n                                this.ok(subtest2.name === \"should throw an asynchronous exception\")\r\n                                if(testEnvironment === 'node') {\r\n                                    this.ok(subtest2.exceptions.length === 1)\r\n                                    this.ok(subtest2.exceptions[0].message === \"Asynchronous Ahhhhh!\")\r\n                                } else {\r\n                                    this.ok(subtest2.exceptions.length === 0)\r\n                                    this.ok(test.exceptions[0].message.indexOf('Asynchronous Ahhhhh!') !== -1)\r\n\r\n                                }\r\n\r\n                                this.ok(subtest2.results.length === 2, subtest2.results.length)\r\n\r\n                                this.ok(subtest1.results[4].type === 'log', subtest1.results[4].type) // log\r\n                                this.ok(subtest1.results[4].values[0] === 'subtest without a name')\r\n\r\n                                subtest2 = subtest1.results[5]\r\n                                this.ok(subtest2.name === undefined)\r\n                                this.ok(subtest2.exceptions.length === 0)\r\n                                this.ok(subtest2.results.length === 1)\r\n                                this.ok(subtest2.results[0].success === true)\r\n\r\n                                subtest2 = subtest1.results[6]     // count\r\n                                this.ok(subtest2.success === false, subtest2.success)\r\n                        })\r\n\r\n                        this.test(\"Verify 'SuccessfulTestGroup'\", function() {\r\n                            this.count(8)\r\n\r\n                            var subtest1 = test.results[1]\r\n                            this.ok(subtest1.name === \"SuccessfulTestGroup\")\r\n                            this.ok(subtest1.exceptions.length === 0)\r\n                            this.ok(subtest1.results.length === 1)\r\n\r\n                            var subtest2 = subtest1.results[0]\r\n                            this.ok(subtest2.name === \"yay\")\r\n                            this.ok(subtest2.exceptions.length === 0)\r\n                            this.ok(subtest2.results.length === 1)\r\n\r\n                            var subtest3 = subtest2.results[0]\r\n                            this.ok(subtest3.success === true)\r\n                            this.ok(subtest3.sourceLines.indexOf(\"true\") !== -1)\r\n                        })\r\n\r\n                        this.test(\"Verify 'long before/after'\", function() {\r\n                            this.count(5)\r\n\r\n                            var subtest1 = test.results[2]\r\n                            this.ok(subtest1.name === \"long before/after\")\r\n                            this.ok(subtest1.exceptions.length === 0)\r\n                            this.ok(subtest1.results.length === 1)\r\n                            this.ok(subtest1.results[0].name === 'one')\r\n                            this.ok(subtest1.results[0].results[0].success === true, subtest1.results[0].file)\r\n                        })\r\n\r\n                        this.test(\"Verify 'asynchronous errors'\", function() {\r\n                            this.count(5)\r\n\r\n                            var subtest1 = test.results[3]\r\n                            this.ok(subtest1.name === \"asynchronous errors\")\r\n                            this.ok(subtest1.results.length === 0)\r\n\r\n                            if(testEnvironment === 'node') {\r\n                                this.ok(subtest1.exceptions.length === 2)\r\n                                this.ok(subtest1.exceptions[0].message === 'moo')\r\n                                this.ok(subtest1.exceptions[1] === 'thrown string')\r\n                            } else {\r\n                                this.ok(subtest1.exceptions.length === 0)\r\n\r\n                                this.ok(test.exceptions[1].message.indexOf('moo') !== -1)\r\n                                this.ok(test.exceptions[2].message.indexOf('thrown string') !== -1) // in the browser, async errors are converted to the stupid onerror format, and so deadunit makes them all Error objects after that\r\n                            }\r\n\r\n                        })\r\n\r\n                        fullDeadunitTestFuture.return()\r\n\r\n                    }.bind(this)).done()\r\n\r\n                }.bind(this)})\r\n\r\n            })\r\n\r\n            return fullDeadunitTestFuture\r\n\r\n        }).then(function() {\r\n\r\n            //*\r\n            t.test(\"befores and afters\", function() {\r\n                var x = 0\r\n                var that = this\r\n\r\n                this.before(function(that2) {\r\n                    this.ok(this === that)\r\n                    this.ok(this === that2)\r\n                    this.log(\"before: \"+x)\r\n                    x++\r\n                })\r\n                this.after(function(that2) {\r\n                    this.ok(this === that)\r\n                    this.ok(this === that2)\r\n                    this.log(\"after: \"+x)\r\n                    x+=10\r\n                })\r\n\r\n                this.test(\"one\", function() {\r\n                    this.log(\"x is: \"+x)\r\n                    this.ok(x===1, x)\r\n                })\r\n                this.test(\"two\", function() {\r\n                    this.ok(x===12, x)\r\n                })\r\n            })\r\n\r\n            t.test(\"Asynchronous times\", function(t) {\r\n                t.count(7)\r\n\r\n                var f1 = new Future, f2 = new Future, f3 = new Future\r\n                moreFutures.push(f3)\r\n                var test = Unit.test(function(test) {\r\n                    this.count(2)\r\n                    setTimeout(function() {\r\n                        test.ok(true)\r\n                        f1.return()\r\n                    }, 100)\r\n                    this.test(function(subtest) {\r\n                        this.count(1)\r\n                        setTimeout(function() {\r\n                            subtest.ok(true)\r\n                            f2.return()\r\n                        }, 200)\r\n                    })\r\n                }).events({end: function() {\r\n                    Future.all([f1,f2]).then(function() {\r\n                        var results = test.results()\r\n\r\n                        t.ok(results.timeout === false, results.timeout)\r\n                        t.ok(results.duration >= 200, results.duration)\r\n                        t.ok(results.results.length === 3, results.results.length)\r\n                        t.ok(results.results[0].results.length === 2)\r\n                        t.ok(results.results[0].results[0].success === true)\r\n                        t.ok(results.results[0].duration >= 200, require('util').inspect(results.results[0]))\r\n                        t.ok(results.results[1].success === true)\r\n\r\n                    }).catch(function(e) {\r\n                        t.ok(false, e)\r\n                    }).finally(function() {\r\n                        f3.return()\r\n                    }).done()\r\n                }})\r\n            })\r\n\r\n            function testCounts(t, test) {\r\n                var results = test.results()\r\n\r\n                t.ok(results.results.length === 3, results.results.length)\r\n                t.ok(results.results[2].actual === 2 && results.results[2].success === true, require('util').inspect(results.results[2]))\r\n                var subtest1 = results.results[0]\r\n                t.ok(subtest1.results[2].actual === 2 && subtest1.results[2].success === true, require('util').inspect(subtest1.results[2]))\r\n                t.ok(subtest1.results.length === 3, subtest1.results.length)\r\n                var subtest2 = subtest1.results[0]\r\n                t.ok(subtest2.results.length === 2, subtest2.results.length)\r\n                t.ok(subtest2.results[1].actual === 1\r\n                    && subtest2.results[1].success === true, require('util').inspect(subtest2.results[1]))\r\n            }\r\n\r\n            t.test(\"counts\", function(t) {\r\n                this.count(6)\r\n                var test = Unit.test(function() {\r\n                    this.count(2)\r\n                    this.test(function() {\r\n                        this.count(2)\r\n                        this.test(function() {\r\n                            this.count(1)\r\n                            this.ok(true)\r\n                        })\r\n                        this.ok(true)\r\n                    })\r\n                    this.ok(true)\r\n                }).events({end: function() {\r\n                    testCounts(t, test)\r\n                }})\r\n            })\r\n\r\n            t.test(\"asynchronous counts\", function(tester) {\r\n                var f = new Future, done = new Future\r\n                var one = new Future, two = new Future // setTimeout apparently isn't deterministic in node.js (which sucks), so using futures instead to guarantee order\r\n\r\n                this.count(6)\r\n                moreFutures.push(done)\r\n\r\n                var test = Unit.test(function(t) {\r\n                    t.count(2)\r\n                    t.test(function(t) {\r\n                        t.count(2)\r\n                        t.test(function(t) {\r\n                            t.count(1)\r\n                            two.then(function() {\r\n                                t.ok(true)\r\n                                f.return()\r\n                            })\r\n                        })\r\n                        one.then(function() {\r\n                            t.ok(true)\r\n                            two.return()\r\n                        })\r\n                    })\r\n                    setTimeout(function() {\r\n                        t.ok(true)\r\n                        one.return()\r\n                    },0)\r\n                }).events({end: function(){\r\n                    f.then(function() {\r\n                        testCounts(tester, test)\r\n\r\n                    }).finally(function() {\r\n                            done.return()\r\n                    }).catch(function(e) {\r\n                        tester.ok(false, e)\r\n                    }).done()\r\n                }})\r\n            })\r\n\r\n            t.test(\"timeouts\", function(t) {\r\n                this.count(1)\r\n\r\n                var test = Unit.test(function(t) {\r\n                    this.timeout(500)\r\n                    this.test(function() {\r\n                        this.count(1) // to make it timeout\r\n                        this.timeout(50)\r\n                    })\r\n                }).events({end: function() {\r\n                    var results = test.results()\r\n                    t.ok(results.duration >= 500, results.duration)\r\n                }})\r\n            })\r\n\r\n            var unhandledErrorHandlerFuture = new Future\r\n            t.test('unhandled error handler', function(realt) {\r\n                this.count(7)\r\n\r\n                var errorCount = 0\r\n\r\n                var test = Unit.test(function(t) {\r\n                    this.count(1)\r\n\r\n                    this.error(function(e) {\r\n                        errorCount++\r\n                        if(errorCount === 1) {\r\n                            realt.ok(e.message === 'synchronous')\r\n                        } else if(errorCount === 2) {\r\n                            if(testEnvironment === 'node') {\r\n                                realt.ok(e.message === 'test', e)\r\n                            } else {\r\n                                realt.ok(e.message.indexOf('Error: test') !== -1)\r\n                            }\r\n\r\n                        } else if(errorCount === 3) {\r\n                            if(testEnvironment === 'node') {\r\n                                realt.ok(e === 'thrown string', e)\r\n                            } else {\r\n                                realt.ok(e.message.indexOf('uncaught exception: thrown string') !== -1, e)\r\n                            }\r\n                        } else if(errorCount === 4) {\r\n                            throw new Error('error inside error handler')\r\n                        } else {\r\n                            realt.ok(false)\r\n                        }\r\n                    })\r\n\r\n                    setTimeout(function() {\r\n                        throw new Error('test')\r\n                    },0)\r\n                    setTimeout(function() {\r\n                        throw \"thrown string\"\r\n                    },0)\r\n                    setTimeout(function() {\r\n                        throw new Error('One more')\r\n                    },0)\r\n                    setTimeout(function() {\r\n                        t.ok(true) // here to make sure all the exceptions are waited for\r\n                    },0)\r\n                    unhandledErrorHandlerFuture.then(function() {\r\n                        this.error(undefined) // get rid of error handler once test is done\r\n                    }.bind(this))\r\n\r\n                    throw new Error(\"synchronous\")\r\n\r\n                }).events({end: function() {\r\n                    var results = test.results()\r\n\r\n                    realt.ok(results.name === undefined)\r\n                    realt.ok(results.results.length === 2, results.results)\r\n                    realt.ok(results.exceptions.length === 1, results.exceptions)\r\n                    realt.ok(results.exceptions[0].message === 'error inside error handler')\r\n\r\n                    unhandledErrorHandlerFuture.return()\r\n                }})\r\n            })\r\n\r\n            return unhandledErrorHandlerFuture\r\n\r\n        }).then(function(){\r\n            //*\r\n            var logsFuture = new Future\r\n            t.test('logs', function() {\r\n\r\n                var array = [1,'a',{a:'b', b:[1,2]}]\r\n                var object = {some: 'object'}\r\n                var error = Error('test')\r\n\r\n                var test = Unit.test(function(t) {\r\n                    this.log(\"string\")\r\n                    this.log(object)\r\n                    this.log(array)\r\n                    this.log(error)\r\n                    this.log(\"string\", object, array, error)\r\n\r\n                    this.ok(false, \"string\")\r\n                    this.ok(false, object)\r\n                    this.ok(false, array)\r\n                    this.ok(false, error)\r\n\r\n                }).events({end: function() {\r\n                    var results = test.results()\r\n\r\n                    this.ok(results.exceptions.length === 0)\r\n                    this.ok(results.results.length === 9)\r\n                    this.ok(results.results[0].values.length === 1)\r\n                    this.ok(results.results[0].values[0] === \"string\")\r\n                    this.ok(results.results[1].values.length === 1)\r\n                    this.ok(results.results[1].values[0] === object, results.results[1].values)\r\n                    this.ok(results.results[2].values.length === 1)\r\n                    this.ok(results.results[2].values[0] === array, results.results[2].values)\r\n                    this.ok(results.results[3].values.length === 1)\r\n                    this.ok(results.results[3].values[0] === error, results.results[3].values)\r\n                    this.ok(results.results[4].values.length === 4)\r\n                    this.ok(results.results[4].values[0] === \"string\", results.results[4].values[0])\r\n                    this.ok(results.results[4].values[1] === object, results.results[4].values[1])\r\n                    this.ok(results.results[4].values[2] === array, results.results[4].values[2])\r\n                    this.ok(results.results[4].values[3] === error, results.results[4].values[3])\r\n\r\n                    this.ok(results.results[5].actual === \"string\", results.results[5].actual)\r\n                    this.ok(results.results[6].actual === object, results.results[6].actual)\r\n                    this.ok(results.results[7].actual === array, results.results[7].actual)\r\n                    this.ok(results.results[8].actual === error, results.results[8].actual)\r\n\r\n                    logsFuture.return()\r\n                }.bind(this)})\r\n\r\n\r\n            })\r\n\r\n            return logsFuture\r\n\r\n        }).then(function(){\r\n\r\n            t.test('event stream', function(t) {\r\n                this.count(9)\r\n\r\n                var done = new Future\r\n                moreFutures.push(done)\r\n\r\n                var groupSequence = sequence()\r\n                var assertSequence = sequence()\r\n                var countSequence = sequence()\r\n                var logSequence = sequence()\r\n                var endSequence = sequence()\r\n\r\n                Unit.test('one', function() {\r\n                    this.log(\"string\")\r\n                    this.ok(false, \"string\")\r\n                    this.ok(true)\r\n\r\n                    this.test('two', function() {\r\n                        this.count(1)\r\n                        this.ok(true)\r\n                    })\r\n                }).events({\r\n                        group: function(e) {\r\n                            groupSequence(function() {\r\n                                t.ok(e.name === 'one')\r\n                            },function() {\r\n                                t.ok(e.name === 'two')\r\n                            })\r\n                        },\r\n                        assert: function(e) {\r\n                            assertSequence(function() {\r\n                                t.ok(e.success === false)\r\n                            },function() {\r\n                                t.ok(e.success === true)\r\n                            },function() {\r\n                                t.ok(e.success === true)\r\n                            })\r\n                        },\r\n                        count: function(e) {\r\n                            countSequence(function() {\r\n                                t.ok(e.success === undefined)\r\n                                t.ok(e.sourceLines === 'this.count(1)', e.sourceLines)\r\n                            })\r\n                        },\r\n                        log: function(e) {\r\n                            logSequence(function() {\r\n                                t.ok(e.values[0] === \"string\")\r\n                            })\r\n                        },\r\n                        end: function(e) {\r\n                            done.return()\r\n                            endSequence(function() {\r\n                                t.ok(e.type === 'normal', e.type)\r\n                            })\r\n                        }\r\n                    })\r\n            })\r\n\r\n            t.test('event stream timeout', function(t) {\r\n                this.count(1)\r\n                var done = new Future\r\n                moreFutures.push(done)\r\n                var endSequence = sequence()\r\n\r\n                Unit.test(function() {\r\n                    this.count(1) // waiting for 1 assert that will never come\r\n                    this.timeout(10)\r\n                }).events({\r\n                        end: function(e) {\r\n                            done.return()\r\n                            endSequence(function() {\r\n                                t.ok(e.type === 'timeout')\r\n                            })\r\n                        }\r\n                    })\r\n            })\r\n\r\n            t.test('event stream nested call', function(t) {\r\n                this.count(1)\r\n\r\n                var unittest = Unit.test(function() {\r\n                    this.count(1) // waiting for 1 assert that will never come\r\n                    this.timeout(10)\r\n                }).events({\r\n                    end: function(e) {\r\n                        unittest.events({\r\n                            end: function() {\r\n                                t.ok(true)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n\r\n            t.test('sourcemap', function(t) {\r\n                var unittest = Unit.test(function() {\r\n                    this.ok(true)\r\n                    this.test('coffeescript file', global.sourceMapTest)\r\n\r\n                }).events({\r\n                    end: function(e) {\r\n                        var results = unittest.results()\r\n\r\n                        // todo: the order of these should swich, but i don't wanna deal with it right now (ie fix the problem in deadunit that's causing earlier assert to be emitted after later subtests)\r\n                        t.ok(results.results[0].results[1].line === 2)\r\n                        t.ok(results.results[0].results[0].line === 7) // in the original source it's 6, this tests turning off source map printing\r\n                        t.ok(results.results[0].exceptions.length === 1)\r\n                        t.ok(results.results[0].exceptions[0] === 'moose', results.results[0].exceptions[0])\r\n\r\n                        t.ok(results.results[1].line === 745) // note that this tests to make sure sourcemaps work with inline-sourcemaps (at least the base64 encoded kind browserify creates)\r\n                    }\r\n                })\r\n            })\r\n\r\n            t.test('former bugs', function() {\r\n                this.count(2)\r\n\r\n                this.test('deadunit would crash if an asynchronous error was thrown in the top-level main test', function(t) {\r\n                    this.count(2)\r\n\r\n                    var unittest = Unit.test(function() {\r\n                        this.count(1)\r\n                        this.timeout(100)\r\n                        setTimeout(function() {\r\n                            throw Error(\"Don't break!\")  // tests a former bug where\r\n                        }, 0)\r\n                    })\r\n                    unittest.events({\r\n                        end: function(e) {\r\n                            var results = unittest.results()\r\n\r\n                            t.ok(results.exceptions.length === 1, results.exceptions.length)\r\n                            if(testEnvironment === 'node') {\r\n                                t.ok(results.exceptions[0].message === \"Don't break!\")\r\n                            } else {\r\n                                t.ok(results.exceptions[0].message.indexOf(\"Don't break!\") !== -1)\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n\r\n                this.test('multi-line asserts', function(t) {\r\n                    this.count(3)\r\n                    var unittest = Unit.test(function() {\r\n                        this.ok(\r\n                            true\r\n                        )\r\n                        this.ok(\r\n                            (true)\r\n                        )\r\n                        this.ok(\r\n                            \")\" === \")\"\r\n                        )\r\n                    })\r\n                    unittest.events({\r\n                        end: function(e) {\r\n                            var results = unittest.results()\r\n                            var sourceLines = results.results[0].sourceLines\r\n                            var squashedSourceLines = sourceLines.replace(/ /g, '')\r\n\r\n                            t.ok(squashedSourceLines === \"this.ok(\\ntrue\\n)\", squashedSourceLines)\r\n                            t.ok(results.results[1].sourceLines.replace(/ /g, '') === \"this.ok(\\n(true)\\n)\")\r\n                            t.ok(results.results[2].sourceLines.replace(/ /g, '') === 'this.ok(\\n\")\"===\")\"\\n)', results.results[2].sourceLines.replace(/ /g, ''))\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n            //*/\r\n\r\n            Future.all(moreFutures).then(function() {\r\n                isDone.return()\r\n            }).done()\r\n\r\n        }).done()\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// returns a function that calls a different function every time\r\n// when it runs out of functions, it errors\r\nfunction sequence() {\r\n    var n = 0\r\n    return function() {\r\n        var fns = arguments\r\n        n++\r\n        if(n-1 >= fns.length) throw Error(\"Unexpected call \"+n)\r\n        fns[n-1]()\r\n\r\n    }\r\n}\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})"]}